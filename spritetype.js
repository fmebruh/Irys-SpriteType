// ==UserScript==

// @nameÂ  Â  Â  Â  Â SpriteType Auto Typer

// @namespaceÂ  Â  http://tampermonkey.net/

// @versionÂ  Â  Â  1.1

// @descriptionÂ  Automatically types and restarts SpriteType typing game (with delay after reload)

// @authorÂ  Â  Â  Â You

// @matchÂ  Â  Â  Â  *://*/*

// @grantÂ  Â  Â  Â  none

// @run-atÂ  Â  Â  Â document-idle

// ==/UserScript==



(function() {

Â  Â  'use strict';



Â  Â  const TYPING_INTERVAL_MS = 150;

Â  Â  const START_DELAY_MS = 3000; // âœ… Added delay before typing starts

Â  Â  const MAX_RESTARTS = 1000;

Â  Â  const RESTART_KEY = '__sprite_restart_count';

Â  Â  let autoTypeInterval = null,

Â  Â  Â  Â  currentWordCharsTyped = 0,

Â  Â  Â  Â  gameData = null;

Â  Â  let restartCount = Number(localStorage.getItem(RESTART_KEY) || '0');



Â  Â  function findReactElementsAndFibers() {

Â  Â  Â  Â  const inputElement = document.querySelector('input[type="text"][autoFocus]');

Â  Â  Â  Â  if (!inputElement) return null;

Â  Â  Â  Â  const inputReactKey = Object.keys(inputElement).find(key => key.startsWith('__reactFiber$'));

Â  Â  Â  Â  if (!inputReactKey) return null;

Â  Â  Â  Â  const inputFiberNode = inputElement[inputReactKey];

Â  Â  Â  Â  let gameComponentFiber = inputFiberNode;

Â  Â  Â  Â  while (gameComponentFiber) {

Â  Â  Â  Â  Â  Â  if (gameComponentFiber.memoizedProps && gameComponentFiber.memoizedProps.selectedTime !== undefined &&

Â  Â  Â  Â  Â  Â  Â  Â  typeof gameComponentFiber.memoizedProps.onStatsUpdate === 'function') {

Â  Â  Â  Â  Â  Â  Â  Â  return { inputElement, inputFiberNode, gameComponentFiber }

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  gameComponentFiber = gameComponentFiber.return;

Â  Â  Â  Â  }

Â  Â  Â  Â  return null;

Â  Â  }



Â  Â  function getGameState(inputElement, inputFiberNode, gameComponentFiber) {

Â  Â  Â  Â  let currentHook = gameComponentFiber.memoizedState;

Â  Â  Â  Â  if (!currentHook) return null;

Â  Â  Â  Â  const allGameHookStates = [];

Â  Â  Â  Â  let tempHook = currentHook;

Â  Â  Â  Â  while (tempHook) {

Â  Â  Â  Â  Â  Â  allGameHookStates.push(tempHook.memoizedState);

Â  Â  Â  Â  Â  Â  tempHook = tempHook.next;

Â  Â  Â  Â  }



Â  Â  Â  Â  const gameStateValue = allGameHookStates.find(state => typeof state === 'string' &&

Â  Â  Â  Â  Â  Â  (state === "waiting" || state === "typing" || state === "finished"));

Â  Â  Â  Â  const currentWordIndexValue = allGameHookStates.find(state => typeof state === 'number' && state >= 0);

Â  Â  Â  Â  const wordsArrayValue = allGameHookStates.find(state => Array.isArray(state) && state.every(item => typeof item === 'string'));

Â  Â  Â  Â  let currentInputValueValue = inputFiberNode.memoizedProps.value;

Â  Â  Â  Â  if (currentInputValueValue === undefined) {

Â  Â  Â  Â  Â  Â  currentInputValueValue = allGameHookStates.find(state => typeof state === 'string' && state !== gameStateValue);

Â  Â  Â  Â  }



Â  Â  Â  Â  const onChangeHandler = inputFiberNode.memoizedProps.onChange;

Â  Â  Â  Â  const onKeyDownHandler = inputFiberNode.memoizedProps.onKeyDown;



Â  Â  Â  Â  if (gameStateValue !== undefined && currentWordIndexValue !== undefined && currentInputValueValue !== undefined &&

Â  Â  Â  Â  Â  Â  wordsArrayValue !== undefined && onChangeHandler && inputElement) {

Â  Â  Â  Â  Â  Â  return {

Â  Â  Â  Â  Â  Â  Â  Â  gameState: { value: gameStateValue },

Â  Â  Â  Â  Â  Â  Â  Â  currentWordIndex: { value: currentWordIndexValue },

Â  Â  Â  Â  Â  Â  Â  Â  currentInputValue: { value: currentInputValueValue },

Â  Â  Â  Â  Â  Â  Â  Â  wordsArray: { value: wordsArrayValue },

Â  Â  Â  Â  Â  Â  Â  Â  onChange: onChangeHandler,

Â  Â  Â  Â  Â  Â  Â  Â  onKeyDown: onKeyDownHandler,

Â  Â  Â  Â  Â  Â  Â  Â  inputElement: inputElement

Â  Â  Â  Â  Â  Â  };

Â  Â  Â  Â  }

Â  Â  Â  Â  return null;

Â  Â  }



Â  Â  async function typeCharacter(char) {

Â  Â  Â  Â  const input = gameData.inputElement;

Â  Â  Â  Â  const currentInputValue = input.value;

Â  Â  Â  Â  const newInputValue = currentInputValue + char;

Â  Â  Â  Â  input.focus();

Â  Â  Â  Â  const keyDownEvent = new KeyboardEvent('keydown', {

Â  Â  Â  Â  Â  Â  key: char,

Â  Â  Â  Â  Â  Â  code: `Key${char.toUpperCase()}`,

Â  Â  Â  Â  Â  Â  keyCode: char.charCodeAt(0),

Â  Â  Â  Â  Â  Â  which: char.charCodeAt(0),

Â  Â  Â  Â  Â  Â  bubbles: true,

Â  Â  Â  Â  Â  Â  cancelable: true

Â  Â  Â  Â  });

Â  Â  Â  Â  input.dispatchEvent(keyDownEvent);

Â  Â  Â  Â  gameData.onKeyDown(keyDownEvent);

Â  Â  Â  Â  const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, "value").set;

Â  Â  Â  Â  nativeInputValueSetter.call(input, newInputValue);

Â  Â  Â  Â  const inputEvent = new Event('input', { bubbles: true });

Â  Â  Â  Â  Object.defineProperty(inputEvent, 'target', { value: input, writable: false });

Â  Â  Â  Â  input.dispatchEvent(inputEvent);

Â  Â  Â  Â  gameData.onChange({ target: { value: newInputValue } });

Â  Â  Â  Â  await new Promise(resolve => setTimeout(resolve, 10));

Â  Â  Â  Â  const keyUpEvent = new KeyboardEvent('keyup', {

Â  Â  Â  Â  Â  Â  key: char,

Â  Â  Â  Â  Â  Â  code: `Key${char.toUpperCase()}`,

Â  Â  Â  Â  Â  Â  keyCode: char.charCodeAt(0),

Â  Â  Â  Â  Â  Â  which: char.charCodeAt(0),

Â  Â  Â  Â  Â  Â  bubbles: true,

Â  Â  Â  Â  Â  Â  cancelable: true

Â  Â  Â  Â  });

Â  Â  Â  Â  input.dispatchEvent(keyUpEvent);

Â  Â  }



Â  Â  async function typeSpace() {

Â  Â  Â  Â  const input = gameData.inputElement;

Â  Â  Â  Â  const newInputValue = input.value + ' ';

Â  Â  Â  Â  input.focus();

Â  Â  Â  Â  const keyDownEvent = new KeyboardEvent('keydown', {

Â  Â  Â  Â  Â  Â  key: ' ',

Â  Â  Â  Â  Â  Â  code: 'Space',

Â  Â  Â  Â  Â  Â  keyCode: 32,

Â  Â  Â  Â  Â  Â  which: 32,

Â  Â  Â  Â  Â  Â  bubbles: true,

Â  Â  Â  Â  Â  Â  cancelable: true

Â  Â  Â  Â  });

Â  Â  Â  Â  input.dispatchEvent(keyDownEvent);

Â  Â  Â  Â  gameData.onKeyDown(keyDownEvent);

Â  Â  Â  Â  const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, "value").set;

Â  Â  Â  Â  nativeInputValueSetter.call(input, newInputValue);

Â  Â  Â  Â  const inputEvent = new Event('input', { bubbles: true });

Â  Â  Â  Â  Object.defineProperty(inputEvent, 'target', { value: input, writable: false });

Â  Â  Â  Â  input.dispatchEvent(inputEvent);

Â  Â  Â  Â  gameData.onChange({ target: { value: newInputValue } });

Â  Â  Â  Â  await new Promise(resolve => setTimeout(resolve, 10));

Â  Â  Â  Â  const keyUpEvent = new KeyboardEvent('keyup', {

Â  Â  Â  Â  Â  Â  key: ' ',

Â  Â  Â  Â  Â  Â  code: 'Space',

Â  Â  Â  Â  Â  Â  keyCode: 32,

Â  Â  Â  Â  Â  Â  which: 32,

Â  Â  Â  Â  Â  Â  bubbles: true,

Â  Â  Â  Â  Â  Â  cancelable: true

Â  Â  Â  Â  });

Â  Â  Â  Â  input.dispatchEvent(keyUpEvent);

Â  Â  Â  Â  currentWordCharsTyped = 0;

Â  Â  }



Â  Â  async function autoTypeStep() {

Â  Â  Â  Â  if (!gameData) {

Â  Â  Â  Â  Â  Â  const foundFibers = findReactElementsAndFibers();

Â  Â  Â  Â  Â  Â  if (!foundFibers) return;

Â  Â  Â  Â  Â  Â  const extractedGameData = getGameState(foundFibers.inputElement, foundFibers.inputFiberNode, foundFibers.gameComponentFiber);

Â  Â  Â  Â  Â  Â  if (!extractedGameData) {

Â  Â  Â  Â  Â  Â  Â  Â  stopAutoType();

Â  Â  Â  Â  Â  Â  Â  Â  return;

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  gameData = extractedGameData;

Â  Â  Â  Â  }



Â  Â  Â  Â  const currentGameState = gameData.gameState.value;

Â  Â  Â  Â  const words = gameData.wordsArray.value;

Â  Â  Â  Â  const currentWordIndex = gameData.currentWordIndex.value;

Â  Â  Â  Â  const targetWord = words[currentWordIndex];



Â  Â  Â  Â  if (currentGameState === "finished") {

Â  Â  Â  Â  Â  Â  stopAutoType();

Â  Â  Â  Â  Â  Â  restartCount++;

Â  Â  Â  Â  Â  Â  console.log(`âœ… Game finished. Restart #${restartCount}`);

Â  Â  Â  Â  Â  Â  if (restartCount > MAX_RESTARTS) {

Â  Â  Â  Â  Â  Â  Â  Â  console.log("â›” Max restarts reached.");

Â  Â  Â  Â  Â  Â  Â  Â  return;

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  localStorage.setItem(RESTART_KEY, String(restartCount));

Â  Â  Â  Â  Â  Â  setTimeout(() => {

Â  Â  Â  Â  Â  Â  Â  Â  const submitBtn = [...document.querySelectorAll('div.text-white.font-bold.font-gt-pressura')]

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .find(div => div.innerText.trim().toLowerCase() === 'submit to leaderboard');

Â  Â  Â  Â  Â  Â  Â  Â  if (submitBtn) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const btn = submitBtn.closest('button');

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (btn) btn.click();

Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  setTimeout(() => {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.log("ðŸ”„ Reloading page to restart...");

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  location.reload();

Â  Â  Â  Â  Â  Â  Â  Â  }, 3000);

Â  Â  Â  Â  Â  Â  }, 1000);

Â  Â  Â  Â  Â  Â  return;

Â  Â  Â  Â  }



Â  Â  Â  Â  if (currentGameState === "waiting") {

Â  Â  Â  Â  Â  Â  const firstWord = words[0];

Â  Â  Â  Â  Â  Â  if (firstWord && firstWord.length > 0) {

Â  Â  Â  Â  Â  Â  Â  Â  await typeCharacter(firstWord[0]);

Â  Â  Â  Â  Â  Â  Â  Â  currentWordCharsTyped = 1;

Â  Â  Â  Â  Â  Â  Â  Â  const foundFibers = findReactElementsAndFibers();

Â  Â  Â  Â  Â  Â  Â  Â  if (foundFibers) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  gameData = getGameState(foundFibers.inputElement, foundFibers.inputFiberNode, foundFibers.gameComponentFiber);

Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  return;

Â  Â  Â  Â  }



Â  Â  Â  Â  if (currentGameState === "typing") {

Â  Â  Â  Â  Â  Â  if (!targetWord) {

Â  Â  Â  Â  Â  Â  Â  Â  stopAutoType();

Â  Â  Â  Â  Â  Â  Â  Â  return;

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  if (currentWordCharsTyped < targetWord.length) {

Â  Â  Â  Â  Â  Â  Â  Â  await typeCharacter(targetWord[currentWordCharsTyped]);

Â  Â  Â  Â  Â  Â  Â  Â  currentWordCharsTyped++;

Â  Â  Â  Â  Â  Â  } else {

Â  Â  Â  Â  Â  Â  Â  Â  await typeSpace();

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  const foundFibers = findReactElementsAndFibers();

Â  Â  Â  Â  Â  Â  if (foundFibers) {

Â  Â  Â  Â  Â  Â  Â  Â  gameData = getGameState(foundFibers.inputElement, foundFibers.inputFiberNode, foundFibers.gameComponentFiber);

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  }

Â  Â  }



Â  Â  function startAutoType(intervalMs = TYPING_INTERVAL_MS) {

Â  Â  Â  Â  if (autoTypeInterval) return;

Â  Â  Â  Â  autoTypeInterval = setInterval(autoTypeStep, intervalMs);

Â  Â  }



Â  Â  function stopAutoType() {

Â  Â  Â  Â  if (autoTypeInterval) {

Â  Â  Â  Â  Â  Â  clearInterval(autoTypeInterval);

Â  Â  Â  Â  Â  Â  autoTypeInterval = null;

Â  Â  Â  Â  Â  Â  currentWordCharsTyped = 0;

Â  Â  Â  Â  Â  Â  gameData = null;

Â  Â  Â  Â  }

Â  Â  }



Â  Â  // Attach to window for manual start/stop

Â  Â  window.startSpriteTypeAutoType = startAutoType;

Â  Â  window.stopSpriteTypeAutoType = stopAutoType;



Â  Â  // âœ… Add delay before auto-start

Â  Â  console.log(`ðŸŸ¢ SpriteType Auto-Typer Loaded. Waiting ${START_DELAY_MS}ms before starting...`);

Â  Â  setTimeout(() => {

Â  Â  Â  Â  startAutoType();

Â  Â  }, START_DELAY_MS);

})();

